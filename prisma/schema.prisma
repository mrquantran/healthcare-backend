// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CLINIC
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String?
  firstName String?
  lastName  String?
  active    Boolean?
  type      UserRole?
  token     Token[]
  booking   Booking[]
}

model Token {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accessToken  String?  @unique
  refreshToken String?  @unique //
  valid        Boolean  @default(true)
  expiration   DateTime

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

enum BookingStatus {
  PENDING
  APPROVE
  REJECTED
}

model Booking {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  title     String
  place     String
  provider  String
  phone     String
  why       String
  status    BookingStatus
  date      BookingDate[]
  category  BookingCategory?
  feedback  BookingRejectFeedBack?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

}

model BookingRejectFeedBack {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  booking     Booking? @relation(fields: [bookingId], references: [id])
  bookingId   String?  @unique @db.ObjectId
}

model BookingDate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  startDate DateTime
  isConfirm Boolean  @default(false)
  isActive  Boolean  @default(true)
  Booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId String?  @db.ObjectId
}

model BookingCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  booking    Booking?    @relation(fields: [bookingId], references: [id])
  bookingId  String?     @unique @db.ObjectId
  categoryId String?     @unique @db.ObjectId
  category   Categories? @relation(fields: [categoryId], references: [id])
}

model Categories {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  title        String            @unique
  description  String?
  bookingStore BookingCategory[]
  createdAt    DateTime          @default(now())
}

model Clinic {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  no        Int
  name      String
  address   String
  district  String
  workHours String
  city      String
  email     String
}
